# -*- coding: utf-8 -*-
"""direct_pixel_extraction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h4DDYMAl-LMN8JCw3o_gwzWoIId-ldoL
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

def convert_image_to_pixel(image_path):
    """
    Reads an image from the specified file path and converts it into a numpy array of pixel values in RGB format.

    Parameters:
    image_path (str): The path to the image file.

    Returns:
    np.ndarray or None: A numpy array containing the pixel values of the image in RGB format,
                        or None if the image cannot be read or the file does not exist.
    """
    # Check if the file exists
    if not os.path.isfile(image_path):
        print(f"Error: File {image_path} does not exist.")
        return None

    # Read the image using OpenCV
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: Unable to read the image at {image_path}")
        return None

    # Convert the image from BGR to RGB format
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Convert image to a numpy array of pixel values
    pixel_matrix = np.array(image_rgb)

    return pixel_matrix

def visualize_pixel_matrix(pixel_matrix):
    """
    Visualizes the pixel matrix of an image.

    This function creates a visualization of the pixel matrix, showing both the pixel matrix as an image
    and the individual pixel values overlaid on the image.

    Parameters:
    pixel_matrix (np.ndarray): A numpy array containing the pixel values of the image.
    """
    plt.figure(figsize=(15, 10))

    plt.subplot(1, 2, 1)
    plt.title("Pixel Matrix")
    plt.imshow(pixel_matrix)
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.title("Pixel Values")
    plt.imshow(pixel_matrix)
    for i in range(pixel_matrix.shape[0]):
        for j in range(pixel_matrix.shape[1]):
            # For each pixel, display the RGB values
            pixel_value = pixel_matrix[i, j]
            text_color = "white" if np.mean(pixel_value) < 128 else "black"
            plt.text(j, i, f"{pixel_value[0]},{pixel_value[1]},{pixel_value[2]}",
                     color=text_color, fontsize=4, ha='center', va='center')
    plt.axis("off")

    plt.show()

# Example usage
if __name__ == "__main__":
    # Define image_path or location
    image_path = "img_2.png"

    # Get the pixel_matrix in numpy array
    pixel_matrix = convert_image_to_pixel(image_path)
    if pixel_matrix is not None:
      print(f"Pixel data for {image_path}:\n", pixel_matrix)

    # Visualize the outputs.
    if pixel_matrix is not None:
        # Visualize the pixel matrix
        visualize_pixel_matrix(pixel_matrix)